{
  "paragraphs": [
    {
      "text": "%python\nfrom neo4j import GraphDatabase\nimport pandas as pd\nimport numpy as np\nimport json\nfrom googletrans import Translator\nimport itertools",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 10:48:30.542",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1548502568445_-1771772463",
      "id": "20190126-093608_2129981658",
      "dateCreated": "2019-01-26 09:36:08.445",
      "dateStarted": "2019-02-02 10:48:30.571",
      "dateFinished": "2019-02-02 10:48:30.644",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nuri \u003d \"bolt://172.17.0.3:7687\"\nuser\u003d\u0027neo4j\u0027\npassword\u003d\u0027neo4j2018\u0027\n\nbulas_df  \u003d pd.read_csv(\"/home/altieris/datascience/data/bulario/cleansed/bulas-tagged.csv\",sep\u003d\u0027;\u0027)\ndrugbank_df \u003d pd.read_csv(\u0027/home/altieris/datascience/data/bulario/drugbank/drugbank.tsv\u0027, sep\u003d\u0027\\t\u0027)\ndrugbank_df[\u0027lower_name\u0027] \u003d drugbank_df[\u0027name\u0027].map(lambda x : x.lower())\n",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 10:49:04.358",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1548502281381_1713775657",
      "id": "20190126-093121_1304408655",
      "dateCreated": "2019-01-26 09:31:21.381",
      "dateStarted": "2019-02-02 10:49:04.385",
      "dateFinished": "2019-02-02 10:49:05.474",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nclass Neo4JConnection(object):\n\n    def __init__(self, uri, user, password):\n        self._driver \u003d GraphDatabase.driver(uri, auth\u003d(user, password))\n\n    def close(self):\n        self._driver.close()\n\n\n    def create_patology(self,nome):\n        with self._driver.session() as session:\n            return session.run(\"CREATE (p:Patologia) \" \n                            \" SET p.nome \u003d $nome  RETURN id(p)\", nome\u003dnome).single().value()\n                           \n    def create_principio_ativo(self,term,english_term,drugbank_id,drugbank_description,drugbank_descricao):\n        with self._driver.session() as session:\n            \n            return session.run(\"MERGE (p:ItemPrincipioAtivo {term: $term, english_term: $english_term,drugbank_id:$drugbank_id,drugbank_description:$drugbank_description,drugbank_descricao:$drugbank_descricao}) RETURN id(p)\", \\\n            term\u003dterm,english_term\u003denglish_term,drugbank_id\u003ddrugbank_id,drugbank_description\u003ddrugbank_description,drugbank_descricao\u003ddrugbank_descricao).single().value()\n            #return session.run(\"CREATE (p:ItemPrincipioAtivo {nome:$nome}) RETURN id(p)\", nome\u003dnome).single().value()\n    \n    def create_contra_indicacao_term(self,nome):\n        with self._driver.session() as session:\n            return session.run(\"CREATE (c:ContraIndicacaoTerm {nome:$nome}) RETURN id(c)\", nome\u003dnome).single().value()\n            \n    def create_relationship_principio_ativo_patologia(self,nome_patologia,nome_principio_ativo,term_frequency):\n        with self._driver.session() as session:\n            return session.run(\"MATCH (p:Patologia),(i:ItemPrincipioAtivo) \"\n                            \"WHERE p.nome \u003d $patologia and  i.term \u003d $principio_ativo \"\n                            \"CREATE (i)-[r:active_principle_indication { nome: p.nome + \u0027 \u003c-\u003e \u0027 + i.term , freq: $frequency }]-\u003e(p) RETURN type(r), r.nome\", patologia\u003dnome_patologia, principio_ativo\u003d nome_principio_ativo,frequency \u003d term_frequency)\n    \n    \n    def create_relationship_contra_indicacao_patologia(self,nome_patologia,nome_contra_indicacao,term_frequency):\n        with self._driver.session() as session:\n            return session.run(\"MATCH (p:Patologia),(c:ItemPrincipioAtivo) \"\n                            \"WHERE p.nome \u003d $patologia and  c.term \u003d $nome_contra_indicacao \"\n                            \"CREATE (c)-[r:counter_indication_term_associated { nome: p.nome + \u0027 \u003c-\u003e \u0027 + c.term , freq: $frequency }]-\u003e(p) RETURN type(r), r.nome\", patologia\u003dnome_patologia, nome_contra_indicacao\u003d nome_contra_indicacao,frequency \u003d term_frequency)\n    \n    \n    def create_relationship_principio_ativo(self,term1,term2,term_frequency):\n        with self._driver.session() as session:\n            return session.run(\"MATCH (i1:ItemPrincipioAtivo),(i2:ItemPrincipioAtivo) \"\n                    \"WHERE i1.term \u003d $term1 and  i2.term \u003d $term2 \"\n                    \"CREATE (i1)-[r:active_principle_linked_term { nome: i1.term + \u0027 \u003c-\u003e \u0027 + i2.term , freq: $frequency }]-\u003e(i2) RETURN type(r), r.nome\", term1\u003dterm1, term2\u003d term2,frequency \u003dterm_frequency)\n    \n                            \n    def delete_all(self):\n        with self._driver.session() as session:\n            return session.run(\"MATCH (n) DETACH DELETE n\").single()\n",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 10:49:07.121",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1548595379128_1483697430",
      "id": "20190127-112259_894328358",
      "dateCreated": "2019-01-27 11:22:59.128",
      "dateStarted": "2019-02-02 10:49:07.159",
      "dateFinished": "2019-02-02 10:49:07.248",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nneo \u003d Neo4JConnection(uri,user,password)\n\n\ndef translate(text,src,dest):\n    translator \u003d Translator()\n    t \u003d translator.translate(text, dest\u003ddest, src\u003dsrc)\n    return t.text.strip()\n    \n\ndef create_patology(name):\n    neo.create_patology(name)\n\ndef create_termos_principio_ativo(terms):\n    for index, row in terms.iterrows():\n        neo.create_principio_ativo(row[\u0027term\u0027],row[\u0027english_term\u0027],row[\u0027drugbank_id\u0027],row[\u0027drugbank_description\u0027],row[\u0027drugbank_descricao\u0027])\n\n\ndef create_termos_contra_indicacao(terms):\n    for index, row in terms.iterrows():\n        neo.create_contra_indicacao_term(row[\u0027term\u0027])\n        \n        \ndef create_relatioship_between_patology_term(patology_name,terms):\n    for index, row in terms.iterrows():\n        neo.create_relationship_principio_ativo_patologia(patology_name,row[\u0027term\u0027],row[\u0027term_freq\u0027]) \n         \n         \ndef create_relatioship_between_principio_ativo(dataframe):\n     for key, value in dataframe.value_counts().to_dict().items():\n        try:\n            itens \u003d np.array(key.split(\u0027,\u0027))\n            c \u003d set(itertools.combinations(itens, 2))\n            for i in c:\n                neo.create_relationship_principio_ativo(i[0],i[1],value)\n        except Exception as err:\n            print(err)\n            print(\u0027error on {}\u0027.format(key)) \n        \n \ndef create_relatioship_between_patology_counter_indication(patology_name,terms):\n    for index, row in terms.iterrows():\n        neo.create_relationship_contra_indicacao_patologia(patology_name,row[\u0027term\u0027],row[\u0027term_freq\u0027]) \n \n\ndef create_relationship_between_ci_terms(dataframe):\n    for key, value in dataframe.value_counts().to_dict().items():\n        try:\n            itens \u003d np.array(key.split(\u0027,\u0027))\n            c \u003d set(itertools.combinations(itens, 2))\n            for i in c:\n                neo.create_relationship_contra_indicacao(i[0],i[1],value)\n        except Exception as err:\n            print(err)\n            print(\u0027error on {}\u0027.format(key))   \n\n            \ndef create_dataframe_word_occurrences(dataframe):\n    df_frequencies \u003d pd.DataFrame(columns\u003d[\u0027term\u0027,\u0027term_freq\u0027])\n\n    itemset \u003d set()\n    for key, value in dataframe.value_counts().to_dict().items():\n        try:\n            itens \u003d np.array(key.split(\u0027,\u0027))\n            for item in itens:\n                if item !\u003d \u0027\u0027:\n                    df_frequencies \u003d df_frequencies.append ({\u0027term\u0027: item,\u0027term_freq\u0027:value}, ignore_index\u003dTrue)\n        except Exception as err:\n            print(\u0027error on {}\u0027.format(key))\n    df_frequencies.drop_duplicates(inplace\u003dTrue)\n    return df_frequencies\n\n\ndef create_counter_indications_diseases(diseases):\n\n    try:\n        c \u003d set(itertools.combinations(diseases, 2))\n        for i in c:\n             \n             disease_df \u003d bulas_df[(bulas_df[\u0027indicacao_keywords\u0027].str.contains(i[0])\u003d\u003dTrue) \u0026 (bulas_df[\u0027contraindicacao_keywords\u0027].str.contains(i[0])\u003d\u003dFalse)]\n             counter_indications \u003d disease_df[disease_df[\u0027contraindicacao_keywords\u0027].str.contains(i[1])\u003d\u003dTrue]\n             df_principio_ativo_terms_all \u003d create_dataframe_word_occurrences(counter_indications[\u0027principio_ativo_keywords\u0027])\n             #print(df_principio_ativo_terms_all)\n             create_relatioship_between_patology_counter_indication(i[1],df_principio_ativo_terms_all)\n             \n             \n             disease_df \u003d bulas_df[(bulas_df[\u0027indicacao_keywords\u0027].str.contains(i[1])\u003d\u003dTrue) \u0026 (bulas_df[\u0027contraindicacao_keywords\u0027].str.contains(i[1])\u003d\u003dFalse)]\n             counter_indications \u003d disease_df[disease_df[\u0027contraindicacao_keywords\u0027].str.contains(i[0])\u003d\u003dTrue]\n             df_principio_ativo_terms_all \u003d create_dataframe_word_occurrences(counter_indications[\u0027principio_ativo_keywords\u0027])\n             #print(df_principio_ativo_terms_all)\n             create_relatioship_between_patology_counter_indication(i[0],df_principio_ativo_terms_all)\n             \n             \n    except Exception as err:\n        print(err)\n        print(\u0027error on {}\u0027.format(key))   \n\n",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 10:49:11.024",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1548507237651_717243025",
      "id": "20190126-105357_35423309",
      "dateCreated": "2019-01-26 10:53:57.651",
      "dateStarted": "2019-02-02 10:49:11.051",
      "dateFinished": "2019-02-02 10:49:11.229",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\ndef lookup_drugbank(term):\n    if term !\u003d \u0027\u0027:\n        drugbank_id \u003d drugbank_df[(drugbank_df[\u0027lower_name\u0027] \u003d\u003d term)][\u0027drugbank_id\u0027].values\n        if drugbank_id.size \u003e 0:\n            return drugbank_id[0]\n    return \u0027\u0027\n    \ndef lookup_drugbank_description(id):\n    if id !\u003d \u0027\u0027:\n        drugbank_description \u003d drugbank_df[(drugbank_df[\u0027drugbank_id\u0027] \u003d\u003d id)][\u0027description\u0027].values\n        if drugbank_description.size \u003e 0:\n            return str(drugbank_description[0]).strip()\n        else:\n            return \u0027\u0027\n    return \u0027\u0027\n\n\n            \nneo.delete_all()\n\ndiseases \u003d [\u0027diabetes\u0027,\u0027hipertensao\u0027,\u0027osteoporose\u0027,\u0027parkinson\u0027,\u0027alzheimer\u0027]\ndiseases_df \u003d []\n\nfor disease in diseases:\n    disease_df \u003d bulas_df[(bulas_df[\u0027indicacao_keywords\u0027].str.contains(disease)\u003d\u003dTrue) \u0026 (bulas_df[\u0027contraindicacao_keywords\u0027].str.contains(disease)\u003d\u003dFalse)]\n    df_principio_ativo_terms_all \u003d create_dataframe_word_occurrences(disease_df[\u0027principio_ativo_keywords\u0027])\n    principio_ativo_terms_dictionary \u003d df_principio_ativo_terms_all[[\u0027term\u0027]]\n    \n    principio_ativo_terms_dictionary \u003d principio_ativo_terms_dictionary.drop_duplicates()\n    principio_ativo_terms_dictionary[\u0027english_term\u0027] \u003d principio_ativo_terms_dictionary[\u0027term\u0027].apply(lambda x : translate(x,\u0027pt\u0027,\u0027en\u0027))\n    principio_ativo_terms_dictionary[\u0027drugbank_id\u0027] \u003d principio_ativo_terms_dictionary[\u0027english_term\u0027].apply(lambda x : lookup_drugbank(x))\n    principio_ativo_terms_dictionary \u003d principio_ativo_terms_dictionary.replace(np.nan, \u0027\u0027, regex\u003dTrue)\n    principio_ativo_terms_dictionary[\u0027drugbank_description\u0027] \u003d principio_ativo_terms_dictionary[\u0027drugbank_id\u0027].apply(lambda x : lookup_drugbank_description(x))\n    principio_ativo_terms_dictionary[\u0027drugbank_descricao\u0027] \u003d principio_ativo_terms_dictionary[\u0027drugbank_description\u0027].apply(lambda x : translate(x.replace(\u0027(\u0027,\u0027\u0027).replace(\u0027)\u0027,\u0027\u0027),\u0027en\u0027,\u0027pt\u0027))\n\n    create_patology(disease)\n    create_termos_principio_ativo(principio_ativo_terms_dictionary)\n    create_relatioship_between_patology_term(disease,df_principio_ativo_terms_all)\n    create_relatioship_between_principio_ativo(disease_df[\u0027principio_ativo_keywords\u0027])\n\n\n\ncreate_counter_indications_diseases(diseases)\n",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 10:49:13.992",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1548713872383_1901330681",
      "id": "20190128-201752_984582256",
      "dateCreated": "2019-01-28 20:17:52.383",
      "dateStarted": "2019-02-02 10:49:14.036",
      "dateFinished": "2019-02-02 10:59:24.300",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j\nmatch(p:Patologia {nome:\u0027hipertensao\u0027})-[r:active_principle_indication]-(i:ItemPrincipioAtivo)-[r1:counter_indication_term_associated]-(p1:Patologia {nome:\u0027diabetes\u0027}) return distinct i.term as indicado_para,p.nome as tratamento_patologia,p1.nome as contra_indicado\n",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 11:03:55.896",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "indicado_para": "string",
                      "tratamento_patologia": "string",
                      "contra_indicado": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "indicado_para\ttratamento_patologia\tcontra_indicado\n\"arginina\"\t\"hipertensao\"\t\"diabetes\"\n\"hidroclorotiazida\"\t\"hipertensao\"\t\"diabetes\"\n\"lisinopril\"\t\"hipertensao\"\t\"diabetes\"\n\"indapamida\"\t\"hipertensao\"\t\"diabetes\"\n\"perindopril\"\t\"hipertensao\"\t\"diabetes\"\n\"micardis\"\t\"hipertensao\"\t\"diabetes\"\n\"telmisartana\"\t\"hipertensao\"\t\"diabetes\"\n\"irbesartana\"\t\"hipertensao\"\t\"diabetes\"\n\"aprozide\"\t\"hipertensao\"\t\"diabetes\"\n\"potassica\"\t\"hipertensao\"\t\"diabetes\"\n\"besilato\"\t\"hipertensao\"\t\"diabetes\"\n\"losartana\"\t\"hipertensao\"\t\"diabetes\"\n\"anlodipino\"\t\"hipertensao\"\t\"diabetes\"\n\"cilexetila\"\t\"hipertensao\"\t\"diabetes\"\n\"candesartana\"\t\"hipertensao\"\t\"diabetes\"\n\"maleato\"\t\"hipertensao\"\t\"diabetes\"\n\"enalapril\"\t\"hipertensao\"\t\"diabetes\"\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548813999884_421316340",
      "id": "20190130-000639_1654007420",
      "dateCreated": "2019-01-30 00:06:39.884",
      "dateStarted": "2019-02-02 11:03:55.937",
      "dateFinished": "2019-02-02 11:03:55.956",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\ndisease_df \u003d bulas_df[(bulas_df[\u0027indicacao_keywords\u0027].str.contains(\u0027hipertensao\u0027)\u003d\u003dTrue) \u0026 (bulas_df[\u0027contraindicacao_keywords\u0027].str.contains(\u0027hipertensao\u0027)\u003d\u003dFalse) \u0026 (bulas_df[\u0027principio_ativo_keywords\u0027].str.contains(\u0027sal\u0027)\u003d\u003dTrue)]\nz.show(disease_df)",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 10:48:56.799",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "filename": "string",
                      "composicao": "string",
                      "indicacao": "string",
                      "contraindicacao": "string",
                      "composicao_keywords": "string",
                      "indicacao_keywords": "string",
                      "contraindicacao_keywords": "string",
                      "principio_ativo": "string",
                      "principio_ativo_keywords": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "filename\tcomposicao\tindicacao\tcontraindicacao\tcomposicao_keywords\tindicacao_keywords\tcontraindicacao_keywords\tprincipio_ativo\tprincipio_ativo_keywords\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1549110528108_1150576025",
      "id": "20190202-102848_798724029",
      "dateCreated": "2019-02-02 10:28:48.108",
      "dateStarted": "2019-02-02 10:48:56.851",
      "dateFinished": "2019-02-02 10:48:56.933",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j\nmatch(p:Patologia {nome:\u0027hipertensao\u0027})-[r:active_principle_indication]-(i:ItemPrincipioAtivo)-[r1:counter_indication_term_associated]-(p1:Patologia {nome:\u0027diabetes\u0027}) return distinct i.term as indicado_para,p.nome as tratamento_patologia,p1.nome as contra_indicado\n",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 11:17:30.710",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "indicado_para": "string",
                      "tratamento_patologia": "string",
                      "contra_indicado": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "indicado_para\ttratamento_patologia\tcontra_indicado\n\"arginina\"\t\"hipertensao\"\t\"diabetes\"\n\"hidroclorotiazida\"\t\"hipertensao\"\t\"diabetes\"\n\"lisinopril\"\t\"hipertensao\"\t\"diabetes\"\n\"indapamida\"\t\"hipertensao\"\t\"diabetes\"\n\"perindopril\"\t\"hipertensao\"\t\"diabetes\"\n\"micardis\"\t\"hipertensao\"\t\"diabetes\"\n\"telmisartana\"\t\"hipertensao\"\t\"diabetes\"\n\"irbesartana\"\t\"hipertensao\"\t\"diabetes\"\n\"aprozide\"\t\"hipertensao\"\t\"diabetes\"\n\"potassica\"\t\"hipertensao\"\t\"diabetes\"\n\"besilato\"\t\"hipertensao\"\t\"diabetes\"\n\"losartana\"\t\"hipertensao\"\t\"diabetes\"\n\"anlodipino\"\t\"hipertensao\"\t\"diabetes\"\n\"cilexetila\"\t\"hipertensao\"\t\"diabetes\"\n\"candesartana\"\t\"hipertensao\"\t\"diabetes\"\n\"maleato\"\t\"hipertensao\"\t\"diabetes\"\n\"enalapril\"\t\"hipertensao\"\t\"diabetes\"\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1549107652108_51317831",
      "id": "20190202-094052_2130659747",
      "dateCreated": "2019-02-02 09:40:52.108",
      "dateStarted": "2019-02-02 11:17:29.202",
      "dateFinished": "2019-02-02 11:17:29.220",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j\nmatch(i:ItemPrincipioAtivo {term:\u0027perindopril\u0027})-[r:active_principle_linked_term]-(i1:ItemPrincipioAtivo) return distinct i.term,i.drugbank_id, i1.term, i1.drugbank_id",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 11:30:16.996",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "i.term": "string",
                      "i.drugbank_id": "string",
                      "i1.term": "string",
                      "i1.drugbank_id": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "i.term\ti.drugbank_id\ti1.term\ti1.drugbank_id\n\"perindopril\"\t\"DB00790\"\t\"indapamida\"\t\"DB00808\"\n\"perindopril\"\t\"DB00790\"\t\"arginina\"\t\"\"\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1549109762537_-1214122336",
      "id": "20190202-101602_1920713781",
      "dateCreated": "2019-02-02 10:16:02.537",
      "dateStarted": "2019-02-02 11:30:16.569",
      "dateFinished": "2019-02-02 11:30:16.615",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2019-02-02 11:30:37.863",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1549110053508_774290735",
      "id": "20190202-102053_1442547649",
      "dateCreated": "2019-02-02 10:20:53.508",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "DATAMINING/VII - NEO4J",
  "id": "2E3CZ695B",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "python:shared_process": [],
    "neo4j:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}